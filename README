# Multi-Core API Server with Clustering

A robust, production-ready Express API server that utilizes all available CPU cores using Node.js clustering. This template is designed for high-performance, scalable, and reliable backend services, making it ideal for both standalone APIs and as a foundation for larger microservices architectures.

## ✨ Features

- **Multi-core scaling:** Uses Node.js cluster module to run one worker per CPU core for maximum throughput.
- **Structured logging:** Daily-rotated logs with Winston for easy debugging and auditing.
- **Health check endpoint:** For uptime and readiness checks.
- **Graceful shutdown:** Handles process signals for safe termination and restart of workers.
- **Environment-based configuration:** Easily configurable via `.env` file.
- **Dockerized:** Ready for containerized deployment.

## 🚀 Quick Start

### 1. Clone and Install

```bash
git clone https://github.com/yourusername/multi-core-api-server.git
cd multi-core-api-server
npm install
```

### 2. Configure

Edit the `.env` file as needed:

```
PORT=3000
LOG_DIR=logs
NODE_ENV=production
```

### 3. Run Locally

```bash
npm start
```

### 4. Docker Deployment

```bash
docker build -t multi-core-api-server .
docker run -p 3000:3000 --env-file .env multi-core-api-server
```

## 📡 API Endpoints

| Method | Endpoint         | Description                          |
|--------|------------------|--------------------------------------|
| GET    | `/`              | Welcome message + worker PID         |
| GET    | `/health`        | Health check and uptime              |

## 🛠️ Use Cases & Template Purposes

This project serves as a **scalable backend template** for:

- **REST API backends** for web or mobile applications.
- **Microservices** in distributed systems.
- **Production-ready Node.js services** requiring high availability and performance.
- **Containerized deployments** on Docker, Kubernetes, or any cloud VM/container platform.

### Extend This Template For:

- Adding **authentication** (JWT, OAuth, etc.).
- **Database integration** (MongoDB, PostgreSQL, etc.).
- Building **custom business logic** and more API endpoints.
- Integrating with **message queues** or other microservices.
- Any Node.js backend where multi-core performance and reliability are needed.

## 💼 For Employers & Demonstration

- **Showcases** your understanding of multi-core scaling, clustering, structured logging, and production best practices.
- **Highlights** a clean, modular, and extensible codebase ready for real-world use.
- **Demonstrates** readiness for backend engineering roles and scalable system design.

## 📚 Project Structure

```
multi-core-api-server/
├── src/
│   ├── config/
│   ├── logger/
│   ├── routes/
│   ├── app.js
│   └── server.js
├── logs/
├── Dockerfile
├── .env
├── package.json
└── README.md
```

WHERE THIS APP IS USEFUL:

1. CPU-Intensive APIs
If your app does heavy computation — like:
Image/video processing
Data crunching (e.g., PDF generation, large JSON transformation)
Cryptographic operations
AI inference (small-scale)
Your setup ensures CPU-bound operations don’t block each other.

2. High-Traffic REST APIs
When handling thousands of concurrent users, clustering:
Reduces bottlenecks
Utilizes server hardware fully
Offers graceful degradation (if 1 worker dies, others keep serving)
Example: Public-facing APIs, e-commerce, analytics dashboards

3. Microservices Gateway
You can use this as a base template for:
A service gateway that handles load balancing internally
API aggregation service that coordinates with multiple microservices

4. Backend Template for Production-Grade Systems
This can be your go-to starter setup when:
Bootstrapping any scalable Node.js service
Teaching teammates how to build fault-tolerant apps
Preparing for Kubernetes (this is a good transition step before full orchestration)


## 📝 License

MIT

**This template is a solid foundation for any high-performance Node.js backend. Fork it, extend it, and use it as the base for your next scalable API or microservice!**
